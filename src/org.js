// Generated by CoffeeScript 1.6.3
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var END_NAME, HL_LEVEL, HL_PRIORITY, HL_TAGS, HL_TODO, Headline, KW_BOILERPLATE, KW_INFO, KW_NAME, Keyword, Meat, Node, RES_NAME, Results, SRC_BOILERPLATE, SRC_INFO, SRC_NAME, Source, buildHeadlineRE, checkMatch, fullLine, headlineRE, keywordRE, matchLine, parseHeadline, parseKeyword, parseMeat, parseOrgChunk, parseOrgMode, parseResults, parseSrcBlock, parseTags, resultsLineRE, resultsRE, root, srcEndRE, srcStartRE, tagsRE, todoKeywords, todoRE,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = module.exports;

  todoKeywords = ['TODO', 'DONE'];

  buildHeadlineRE = function() {
    return new RegExp('^(\\*+) *(' + todoKeywords.join('|') + ')?(?: *(?:\\[#(A|B|C)\\]))?[^\n]*?(:[^:\n]*:)? *$', 'm');
  };

  HL_LEVEL = 1;

  HL_TODO = 2;

  HL_PRIORITY = 3;

  HL_TAGS = 4;

  headlineRE = buildHeadlineRE();

  todoRE = /^(\*+) *(TODO|DONE)/;

  tagsRE = /:[^:]*/;

  KW_BOILERPLATE = 1;

  KW_NAME = 2;

  KW_INFO = 3;

  keywordRE = /^(#\+([^:\n][^\n]*): *)([^\n]*)$/im;

  SRC_BOILERPLATE = 1;

  SRC_NAME = 2;

  SRC_INFO = 3;

  srcStartRE = /^(#\+(BEGIN_SRC) *)([^\n]*)$/im;

  END_NAME = 1;

  srcEndRE = /^#\+(END_SRC)( *)$/im;

  RES_NAME = 1;

  resultsRE = /^#\+(RESULTS): *$/im;

  resultsLineRE = /^([:|] .*)(?:\n|$)/i;

  matchLine = function(txt) {
    return checkMatch(txt, srcStartRE, 'srcStart') || checkMatch(txt, srcEndRE, 'srcEnd') || checkMatch(txt, resultsRE, 'results') || checkMatch(txt, keywordRE, 'keyword') || checkMatch(txt, headlineRE, function(m) {
      return "headline-" + m[HL_LEVEL].length;
    });
  };

  checkMatch = function(txt, pat, result) {
    var m;
    m = txt.match(pat);
    if ((m != null ? m.index : void 0) === 0) {
      if (typeof result === 'string') {
        return result;
      } else {
        return result(m);
      }
    } else {
      return false;
    }
  };

  Node = (function() {
    function Node() {}

    Node.prototype.length = function() {
      return this.text.length;
    };

    Node.prototype.end = function() {
      return this.offset + this.text.length;
    };

    Node.prototype.toJson = function() {
      return JSON.stringify(this.toJsonObject(), null, "  ");
    };

    Node.prototype.allText = function() {
      return this.text;
    };

    Node.prototype.block = false;

    Node.prototype.findNodeAt = function(pos) {
      if (this.offset <= pos && pos < this.offset + this.text.length) {
        return this;
      } else {
        return null;
      }
    };

    Node.prototype.scan = function(func) {
      return func(this);
    };

    Node.prototype.linkNodes = function() {
      return this;
    };

    Node.prototype.next = null;

    Node.prototype.prev = null;

    Node.prototype.top = function() {
      if (!this.parent) {
        return this;
      } else {
        return this.parent.top();
      }
    };

    return Node;

  })();

  Headline = (function(_super) {
    __extends(Headline, _super);

    function Headline(text, level, todo, priority, tags, children, offset) {
      this.text = text;
      this.level = level;
      this.todo = todo;
      this.priority = priority;
      this.tags = tags;
      this.children = children;
      this.offset = offset;
    }

    Headline.prototype.block = true;

    Headline.prototype.lowerThan = function(l) {
      return l < this.level;
    };

    Headline.prototype.length = function() {
      return this.end() - this.offset;
    };

    Headline.prototype.end = function() {
      var lastChild;
      if (this.children.length) {
        lastChild = this.children[this.children.length - 1];
        return lastChild.offset + lastChild.length();
      } else {
        return Headline.__super__.end.call(this);
      }
    };

    Headline.prototype.type = 'headline';

    Headline.prototype.toJsonObject = function() {
      var c;
      return {
        type: this.type,
        text: this.text,
        offset: this.offset,
        level: this.level,
        todo: this.todo,
        priority: this.priority,
        tags: this.tags,
        children: (function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(c.toJsonObject());
          }
          return _results;
        }).call(this)
      };
    };

    Headline.prototype.allText = function() {
      var c;
      return this.text + ((function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push(c.allText());
        }
        return _results;
      }).call(this)).join('');
    };

    Headline.prototype.findNodeAt = function(pos) {
      var child, res, _i, _len, _ref;
      if (pos < this.offset || this.offset + this.length() < pos) {
        return null;
      } else if (pos < this.offset + this.text.length) {
        return this;
      } else {
        _ref = this.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (res = child.findNodeAt(pos)) {
            return res;
          }
        }
        return null;
      }
    };

    Headline.prototype.scan = function(func) {
      var c, _i, _len, _ref, _results;
      Headline.__super__.scan.call(this, func);
      _ref = this.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        _results.push(c.scan(func));
      }
      return _results;
    };

    Headline.prototype.linkNodes = function() {
      var c, prev, _i, _len, _ref;
      prev = null;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        c.linkNodes();
        c.parent = this;
        c.prev = prev;
        if (prev) {
          prev.next = c;
        }
        prev = c;
      }
      return this;
    };

    return Headline;

  })(Node);

  Meat = (function(_super) {
    __extends(Meat, _super);

    function Meat(text, offset) {
      this.text = text;
      this.offset = offset;
    }

    Meat.prototype.lowerThan = function(l) {
      return true;
    };

    Meat.prototype.type = 'meat';

    Meat.prototype.toJsonObject = function() {
      return {
        type: this.type,
        text: this.text,
        offset: this.offset
      };
    };

    return Meat;

  })(Node);

  Keyword = (function(_super) {
    __extends(Keyword, _super);

    function Keyword(text, offset, name, info) {
      this.text = text;
      this.offset = offset;
      this.name = name;
      this.info = info;
    }

    Keyword.prototype.block = true;

    Keyword.prototype.type = 'keyword';

    Keyword.prototype.toJsonObject = function() {
      return {
        type: this.type,
        text: this.text,
        offset: this.offset,
        name: this.name,
        info: this.info
      };
    };

    return Keyword;

  })(Meat);

  Source = (function(_super) {
    __extends(Source, _super);

    function Source(text, offset, name, info, content, contentPos) {
      this.text = text;
      this.offset = offset;
      this.name = name;
      this.info = info;
      this.content = content;
      this.contentPos = contentPos;
    }

    Source.prototype.type = 'source';

    Source.prototype.toJsonObject = function() {
      return {
        type: this.type,
        text: this.text,
        offset: this.offset,
        name: this.name,
        info: this.info,
        content: this.content,
        contentPos: this.contentPos
      };
    };

    return Source;

  })(Keyword);

  Results = (function(_super) {
    __extends(Results, _super);

    function Results(text, offset, name, contentPos) {
      this.text = text;
      this.offset = offset;
      this.name = name;
      this.contentPos = contentPos;
    }

    Results.prototype.type = 'results';

    Results.prototype.toJsonObject = function() {
      return {
        type: this.type,
        text: this.text,
        offset: this.offset,
        name: this.name,
        contentPos: this.contentPos
      };
    };

    return Results;

  })(Keyword);

  parseOrgMode = function(text) {
    var res, rest, _ref;
    _ref = parseHeadline('', 0, 0, void 0, void 0, void 0, text, text.length), res = _ref[0], rest = _ref[1];
    if (rest.length) {
      throw new Error("Text left after parsing: " + rest);
    }
    return res.linkNodes();
  };

  parseHeadline = function(text, offset, level, todo, priority, tags, rest, totalLen) {
    var child, children, _ref;
    children = [];
    while (true) {
      _ref = parseOrgChunk(rest, totalLen - rest.length, level), child = _ref[0], rest = _ref[1];
      if (!child) {
        break;
      }
      if (child.lowerThan(level)) {
        children.push(child);
      }
    }
    tags = tags ? tags.substring(1, tags.length - 1) : '';
    return [new Headline(text, level, todo, priority, tags, children, offset), rest];
  };

  parseTags = function(text) {
    var t, tagArray, _i, _len, _ref;
    tagArray = [];
    _ref = (text ? text.split(':') : []);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      if (t) {
        tagArray.push(t);
      }
    }
    return tagArray;
  };

  fullLine = function(match, text) {
    return text.substring(0, match[0].length + (text[match[0].length] === '\n' ? 1 : 0));
  };

  parseOrgChunk = function(text, offset, level) {
    var line, m, meat;
    if (!text) {
      return [null, text];
    } else {
      m = text.match(headlineRE);
      if ((m != null ? m.index : void 0) === 0) {
        if (m[HL_LEVEL].length <= level) {
          return [null, text];
        } else {
          line = fullLine(m, text);
          return parseHeadline(line, offset, m[HL_LEVEL].length, m[HL_TODO], m[HL_PRIORITY], m[HL_TAGS], text.substring(line.length), offset + text.length);
        }
      } else {
        meat = text.substring(0, m ? m.index : text.length);
        return parseMeat(meat, offset, text.substring(meat.length));
      }
    }
  };

  parseMeat = function(meat, offset, rest) {
    var first, keyword, line, results, srcStart, _ref, _ref1, _ref2;
    srcStart = meat.match(srcStartRE);
    keyword = meat.match(keywordRE);
    results = meat.match(resultsRE);
    if ((results != null ? results.index : void 0) === 0) {
      line = fullLine(results, meat);
      return parseResults(line, offset, meat.substring(line.length) + rest);
    } else if ((srcStart != null ? srcStart.index : void 0) === 0) {
      line = fullLine(srcStart, meat);
      return parseSrcBlock(line, offset, srcStart[SRC_INFO], meat.substring(line.length) + rest);
    } else if ((keyword != null ? keyword.index : void 0) === 0) {
      line = fullLine(keyword, meat);
      return parseKeyword(line, offset, keyword[KW_NAME], keyword[KW_INFO], meat.substring(line.length) + rest);
    } else {
      first = meat.length + offset;
      first = Math.min(first, (_ref = srcStart != null ? srcStart.index : void 0) != null ? _ref : first, (_ref1 = keyword != null ? keyword.index : void 0) != null ? _ref1 : first, (_ref2 = results != null ? results.index : void 0) != null ? _ref2 : first);
      return [new Meat(meat.substring(0, first), offset), meat.substring(first) + rest];
    }
  };

  parseResults = function(text, offset, rest) {
    var lines, m, oldRest;
    oldRest = rest;
    while (m = rest.match(resultsLineRE)) {
      rest = rest.substring(m[0].length);
    }
    lines = oldRest.substring(0, oldRest.length - rest.length);
    return [new Results(text + lines, offset + 1, text.match(resultsRE)[RES_NAME], text.length + offset + 1), rest];
  };

  parseKeyword = function(text, offset, name, info, rest) {
    return [new Keyword(text, offset, name, info), rest];
  };

  parseSrcBlock = function(text, offset, info, rest) {
    var end, endLine, line, otherSrcStart;
    end = rest.match(srcEndRE);
    otherSrcStart = rest.match(srcStartRE);
    if (!end || (otherSrcStart && otherSrcStart.index < end.index)) {
      line = text.match(/^.*\n/);
      if (!line) {
        line = [text];
      }
      return [new Meat(line[0]), text.substring(line[0].length) + rest];
    } else {
      endLine = fullLine(end, rest.substring(end.index));
      console.log("END: " + (JSON.stringify(endLine)));
      return [new Source(text + rest.substring(0, end.index + endLine.length), offset, text.match(srcStartRE)[SRC_NAME], info, rest.substring(0, end.index), offset + text.length), rest.substring(end.index + endLine.length)];
    }
  };

  root.parseOrgMode = parseOrgMode;

  root.Headline = Headline;

  root.Meat = Meat;

  root.Keyword = Keyword;

  root.Source = Source;

  root.Results = Results;

  root.headlineRE = headlineRE;

  root.HL_TAGS = HL_TAGS;

  root.parseTags = parseTags;

  root.matchLine = matchLine;

  root.keywordRE = keywordRE;

  root.KW_BOILERPLATE = KW_BOILERPLATE;

  root.KW_NAME = KW_NAME;

  root.srcStartRE = srcStartRE;

  root.SRC_BOILERPLATE = SRC_BOILERPLATE;

  root.SRC_INFO = SRC_INFO;

}).call(this);

/*
//@ sourceMappingURL=org.map
*/
