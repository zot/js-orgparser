// Generated by CoffeeScript 1.6.3
/*
Copyright (C) 2013, Bill Burdick, Tiny Concepts: https://github.com/zot/Leisure

(licensed with ZLIB license)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.
*/


(function() {
  var END_LEAD, HL_LEAD, HL_LEVEL, HL_PRIORITY, HL_TAGS, HL_TEXT, HL_TODO, Headline, KW_INFO, KW_LEAD, KW_NAME, Keyword, Meat, Node, SRC_INFO, SRC_LEAD, Source, buildHeadlineRE, headlineRE, keywordRE, parseHeadline, parseKeyword, parseMeat, parseOrgChunk, parseOrgMode, parseSrcBlock, srcEndRE, srcStartRE, tagsRE, todoKeywords, todoRE,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  todoKeywords = ['TODO', 'DONE'];

  buildHeadlineRE = function() {
    return new RegExp('(^|\\n)((\\*+) *(' + todoKeywords.join('|') + ')?(?: *(?:\\[#(A|B|C)\\]))?.*?(:.*:)? *(?:\\n|$))');
  };

  HL_LEAD = 1;

  HL_TEXT = 2;

  HL_LEVEL = 3;

  HL_TODO = 4;

  HL_PRIORITY = 5;

  HL_TAGS = 6;

  headlineRE = buildHeadlineRE();

  todoRE = /(\*+) *(TODO|DONE)/;

  tagsRE = /:[^:]*/;

  KW_LEAD = 1;

  KW_NAME = 2;

  KW_INFO = 3;

  keywordRE = /(^|\n)#\+([^:].*): *(.*)(?:\n|$)/i;

  SRC_LEAD = 1;

  SRC_INFO = 2;

  srcStartRE = /(^|\n)#\+BEGIN_SRC *(.*)(?:\n|$)/i;

  END_LEAD = 1;

  srcEndRE = /(^|\n)#\+END_SRC( *)(?:\n|$)/i;

  Node = (function() {
    function Node() {}

    Node.prototype.length = function() {
      return this.text.length;
    };

    Node.prototype.toJson = function() {
      return JSON.stringify(this.toJsonObject(), null, "  ");
    };

    Node.prototype.allText = function() {
      return this.text;
    };

    return Node;

  })();

  Headline = (function(_super) {
    __extends(Headline, _super);

    function Headline(text, level, todo, priority, tags, children, offset) {
      this.text = text;
      this.level = level;
      this.todo = todo;
      this.priority = priority;
      this.tags = tags;
      this.children = children;
      this.offset = offset;
    }

    Headline.prototype.lowerThan = function(l) {
      return l < this.level;
    };

    Headline.prototype.length = function() {
      var lastChild;
      if (this.children.length) {
        lastChild = this.children[this.children.length - 1];
        return lastChild.offset + lastChild.length() - this.offset;
      } else {
        return Headline.__super__.length.apply(this, arguments).length();
      }
    };

    Headline.prototype.toJsonObject = function() {
      var c;
      return {
        type: 'headline',
        text: this.text,
        offset: this.offset,
        level: this.level,
        todo: this.todo,
        priority: this.priority,
        tags: this.tags,
        children: (function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(c.toJsonObject());
          }
          return _results;
        }).call(this)
      };
    };

    Headline.prototype.allText = function() {
      var c;
      return this.text + ((function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          _results.push(c.allText());
        }
        return _results;
      }).call(this)).join('');
    };

    return Headline;

  })(Node);

  Meat = (function(_super) {
    __extends(Meat, _super);

    function Meat(text, offset) {
      this.text = text;
      this.offset = offset;
    }

    Meat.prototype.lowerThan = function(l) {
      return true;
    };

    Meat.prototype.type = 'meat';

    Meat.prototype.toJsonObject = function() {
      return {
        type: this.type,
        text: this.text,
        offset: this.offset
      };
    };

    return Meat;

  })(Node);

  Keyword = (function(_super) {
    __extends(Keyword, _super);

    function Keyword(text, offset, name, info) {
      this.text = text;
      this.offset = offset;
      this.name = name;
      this.info = info;
    }

    Keyword.prototype.toJsonObject = function() {
      return {
        type: 'keyword',
        name: this.name,
        info: this.info,
        text: this.text,
        offset: this.offset
      };
    };

    return Keyword;

  })(Meat);

  Source = (function(_super) {
    __extends(Source, _super);

    function Source(text, offset, info, content, contentPos) {
      this.text = text;
      this.offset = offset;
      this.info = info;
      this.content = content;
      this.contentPos = contentPos;
    }

    Source.prototype.toJsonObject = function() {
      return {
        type: 'source',
        info: this.info,
        content: this.content,
        contentPos: this.contentPos,
        text: this.text,
        offset: this.offset
      };
    };

    return Source;

  })(Meat);

  parseOrgMode = function(text) {
    var res, rest, _ref;
    _ref = parseHeadline('', 0, 0, void 0, void 0, void 0, text, text.length), res = _ref[0], rest = _ref[1];
    if (rest.length) {
      throw new Error("Text left after parsing: " + rest);
    }
    return res;
  };

  parseHeadline = function(text, offset, level, todo, priority, tags, rest, totalLen) {
    var child, children, t, tagArray, _i, _len, _ref, _ref1;
    children = [];
    while (true) {
      _ref = parseOrgChunk(rest, totalLen - rest.length, level), child = _ref[0], rest = _ref[1];
      if (!child) {
        break;
      }
      if (child.lowerThan(level)) {
        children.push(child);
      }
    }
    tagArray = [];
    _ref1 = (tags ? tags.split(':') : []);
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      t = _ref1[_i];
      if (t) {
        tagArray.push(t);
      }
    }
    return [new Headline(text, level, todo, priority, (tags ? tagArray : void 0), children, offset), rest];
  };

  parseOrgChunk = function(text, offset, level) {
    var m, meat;
    if (!text) {
      return [null, text];
    } else {
      m = text.match(headlineRE);
      if ((m != null ? m.index : void 0) === 0 && m[HL_LEAD].length === 0) {
        if (m[HL_LEVEL].length <= level) {
          return [null, text];
        } else {
          return parseHeadline(m[HL_TEXT], offset + m[HL_LEAD].length, m[HL_LEVEL].length, m[HL_TODO], m[HL_PRIORITY], m[HL_TAGS], text.substring(m[0].length), offset + text.length);
        }
      } else {
        meat = text.substring(0, m ? m.index + m[HL_LEAD].length : text.length);
        return parseMeat(meat, offset, text.substring(meat.length));
      }
    }
  };

  parseMeat = function(meat, offset, rest) {
    var keyword, pat, srcStart;
    srcStart = meat.match(srcStartRE);
    keyword = meat.match(keywordRE);
    if ((keyword != null ? keyword[KW_LEAD].length : void 0) === 0) {
      return parseKeyword(keyword[0], offset, keyword[KW_NAME], keyword[KW_INFO], meat.substring(keyword[0].length) + rest);
    } else if ((srcStart != null ? srcStart[SRC_LEAD].length : void 0) === 0) {
      return parseSrcBlock(srcStart[0], offset, srcStart[SRC_INFO], meat.substring(srcStart[0].length) + rest);
    } else {
      pat = keyword;
      if (srcStart && (!keyword || srcStart.index < keyword.index)) {
        pat = srcStart;
      }
      if (pat) {
        rest = meat.substring(pat.index + pat[1].length) + rest;
        meat = meat.substring(0, pat.index + pat[1].length);
      }
      return [new Meat(meat, offset), rest];
    }
  };

  parseKeyword = function(text, offset, name, info, rest) {
    return [new Keyword(text, offset, name, info), rest];
  };

  parseSrcBlock = function(text, offset, info, rest) {
    var end, otherSrcStart;
    end = rest.match(srcEndRE);
    otherSrcStart = rest.match(srcStartRE);
    if (!end) {
      throw new Error("No end for source block at offset: " + offset + ", rest: " + rest);
    } else if (otherSrcStart && otherSrcStart.index < end.index) {
      throw new Error("No end for first sourcestart at offset: " + offset);
    } else {
      return [new Source(text + rest.substring(0, end.index + end[0].length), offset, info, rest.substring(0, end.index + end[END_LEAD].length), offset + text.length), rest.substring(end.index + end[0].length)];
    }
  };

  root.parseOrgMode = parseOrgMode;

}).call(this);
